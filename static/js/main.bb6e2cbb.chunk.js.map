{"version":3,"sources":["components/tiles.js","App.js","serviceWorker.js","index.js"],"names":["Tiles","props","react_default","a","createElement","className","onMouseEnter","src","img","alt","title","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mouseIn","setState","mouseAction","mouseOut","mouseIn1","mouseAction1","mouseOut1","handleAdd","index","event","temp1","assign","state","MyListItem","flag1","map","item","id","Recommendation","push","temp","splice","forceUpdate","handleRemove","flag2","temp2","_this2","fetch","then","response","json","mylist","recommendations","_this3","tiles","key","onMouseLeave","onClick","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb6e2cbb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Tiles = (props) => {\r\n\treturn(\r\n\t\t<div className=\"my-list3\"  onMouseEnter = {props.onMouseEnter} >\r\n\t\t\t<img src={props.img} className=\"image\" alt =\" \" /><br/>\r\n\t\t\t<span>{props.title}</span><br/>\r\n\t\t\r\n\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Tiles;","import React, { Component } from 'react';\nimport Tiles from './components/tiles.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor()\n    {\n      super();\n      this.state = {\n        MyListItem:[],\n        Recommendation:[],\n        mouseAction: false,\n        mouseAction1: false\n      };\n    }\n\n    mouseIn = () => this.setState({mouseAction:true})\n    mouseOut = () => this.setState({mouseAction:false})\n    mouseIn1 = () => this.setState({mouseAction1:true})\n    mouseOut1 = () => this.setState({mouseAction1:false})\n\n    handleAdd = (index, event) => {\n      const temp1 = Object.assign({}, this.state.MyListItem[0]);\n      let flag1 = true;\n      this.state.MyListItem.map((item)=> {\n        if(item.id === this.state.Recommendation[index].id)\n            flag1 = false;\n      })\n      if(flag1)\n      {\n        temp1.id = this.state.Recommendation[index].id;\n        temp1.title = this.state.Recommendation[index].title;\n        temp1.img = this.state.Recommendation[index].img;\n        this.state.MyListItem.push(temp1);\n      }     \n      const temp = Object.assign([], this.state.Recommendation);\n      temp.splice(index,1);\n      this.setState({Recommendation:temp})\n      this.forceUpdate();\n    }\n\n    handleRemove = (index,event) => {\n      let flag2 = true;\n      const temp = Object.assign([], this.state.MyListItem);\n      temp.splice(index,1);\n      const temp2 = Object.assign({}, this.state.Recommendation[0]);\n      this.state.Recommendation.map((item)=>{\n          if(item.id === this.state.MyListItem[index].id)\n            flag2 = false;\n      })\n      if(flag2)\n      {\n        temp2.id = this.state.MyListItem[index].id;\n        temp2.title = this.state.MyListItem[index].title;\n        temp2.img = this.state.MyListItem[index].img;\n        this.state.Recommendation.push(temp2);\n      }\n      this.setState({MyListItem:temp})  \n    }\n\n    componentWillMount()\n    {  \n      fetch(\"/list.json\")\n      .then(response => response.json())\n      .then(json => {\n        this.setState({MyListItem:json.mylist})\n        this.setState({Recommendation:json.recommendations})\n      })   \n    }\t\n  render() {\n    return (\n\t\t<div className=\"App\">\n\t\t\t<div  className=\"my-list1\">\n\t\t\t\t<h2>My List</h2> \n      \t<div>\n\t\t\t\t{\n\t\t\t\t\tthis.state.MyListItem.map((item,index) => {\n\t\t\t\t\treturn(\n            <div className = \"my-list\">\n            <Tiles\n\t\t\t\t\t\t  title = {item.title}\n\t\t\t\t\t\t  key = {item.id}\n              img={item.img}\n              onMouseEnter={this.mouseIn} \n              onMouseLeave={this.mouseOut}/>\n             <div className=\"btn\" \n              onClick={this.handleRemove.bind(this, index)}>{this.state.mouseAction ?<button>Remove</button> : null}</div>\n            </div>\n           )\n\t\t\t\t\t})\n        }\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div  className=\"my-list1\">\n\t\t\t\t<br/><br/>\n\t\t\t\t<h2>Recommendations</h2>\n\t\t\t\t<div>\n\t\t\t\t{ \n\t\t\t\t\tthis.state.Recommendation.map((item,index) => {\n\t\t\t\t\treturn(\n            <div className=\"my-list\">\n            <Tiles\n\t\t\t\t\t\t  title = {item.title}\n\t\t\t\t\t\t  key = {item.id}\n\t\t\t\t\t\t  img={item.img}\n              onMouseEnter={this.mouseIn1} \n              onMouseLeave={this.mouseOut1}/>\n            <div className=\"btn\" \n              onClick={this.handleAdd.bind(this, index)}>{this.state.mouseAction1 ?<button>Add</button> : null}</div>\n           </div>\n          )\n\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"updated-mylist\">\n\t\t\t\t<br/><br/>\n\t\t\t\t<h2>My List</h2>\n\t\t\t\t{this.state.MyListItem.map((item) => <ul>{item.title}</ul>)}\n\t\t\t</div>\n\t\t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}